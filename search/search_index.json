{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Accueil Ce projet h\u00e9berge des Makefiles comuns afin de factoriser certaines pratiques de d\u00e9veloppement.","title":"Accueil"},{"location":"#accueil","text":"Ce projet h\u00e9berge des Makefiles comuns afin de factoriser certaines pratiques de d\u00e9veloppement.","title":"Accueil"},{"location":"10_prerequisites/","text":"Pr\u00e9-requis Pour utiliser ces Makefiles, vous aurez besoin d'une distribution Linux avec les outils standards suivants : make (\u00e9videmment, dans sa version GNU) wget (pour t\u00e9l\u00e9charger diverses choses) bash (car toutes les \"targets\" sont \u00e9crites en bash ) xz (pour d\u00e9compresser certains outils t\u00e9l\u00e9charg\u00e9s sur internet) find , xargs (pour chercher des fichiers) les outils standards unix de manipulations de texte: cat , awk , sed , tr ... Tous ces outils sont normalement pr\u00e9install\u00e9s sur notre distribution Linux. N\u00e9anmoins, si vous utilisez un container minimis\u00e9 par exemple, certains peuvent manquer. Pour installer ces d\u00e9pendances : Pour une CentOS 7 Pour une CentOS/Rocky 8 yum -y install make wget xz findutils dnf -y install make wget xz findutils Et en option : git (pour la fonctionnalit\u00e9 de mise \u00e0 jour uniquement, vous pouvez donc vous en passer \u00e9ventuellement) Pour installer git : Pour une CentOS 7 Pour une CentOS/Rocky 8 yum -y install git dnf -y install git","title":"Pr\u00e9-requis"},{"location":"10_prerequisites/#pre-requis","text":"Pour utiliser ces Makefiles, vous aurez besoin d'une distribution Linux avec les outils standards suivants : make (\u00e9videmment, dans sa version GNU) wget (pour t\u00e9l\u00e9charger diverses choses) bash (car toutes les \"targets\" sont \u00e9crites en bash ) xz (pour d\u00e9compresser certains outils t\u00e9l\u00e9charg\u00e9s sur internet) find , xargs (pour chercher des fichiers) les outils standards unix de manipulations de texte: cat , awk , sed , tr ... Tous ces outils sont normalement pr\u00e9install\u00e9s sur notre distribution Linux. N\u00e9anmoins, si vous utilisez un container minimis\u00e9 par exemple, certains peuvent manquer. Pour installer ces d\u00e9pendances : Pour une CentOS 7 Pour une CentOS/Rocky 8 yum -y install make wget xz findutils dnf -y install make wget xz findutils Et en option : git (pour la fonctionnalit\u00e9 de mise \u00e0 jour uniquement, vous pouvez donc vous en passer \u00e9ventuellement) Pour installer git : Pour une CentOS 7 Pour une CentOS/Rocky 8 yum -y install git dnf -y install git","title":"Pr\u00e9-requis"},{"location":"20_install/","text":"Comment les installer dans votre repository ? 1. Dans tous les cas Voici la commande \u00e0 copier/coller pour installer la derni\u00e8re version sur votre repository. bash -c \" $( curl -fsSLk https://raw.githubusercontent.com/meteofrance/common_makefiles/main/install.sh ) \" Note Pour utiliser cette commande, vous devez avoir git et bash install\u00e9 et b\u00e9n\u00e9ficier d'un acc\u00e8s \u00e0 internet. Si vous n'avez pas confiance dans cette derni\u00e8re commande (ou si vous pr\u00e9f\u00e9rez maitriser exactement ce qui est fait), vous pouvez simplement cloner ce repository et copier le sous-r\u00e9pertoire dist \u00e0 la racine de votre projet sous le nom .common_makefiles . N'omettez aucun fichier ! Attention, n'omettez aucun fichier, y compris le fichier extra.tar . Et commitez donc la totalit\u00e9 du r\u00e9pertoire .common_makefiles ainsi obtenu. Ensuite, cr\u00e9ez (ou modifiez s'il existe d\u00e9j\u00e0) un fichier Makefile \u00e0 la racine de votre projet selon son type (voir ci-dessous). Vous devez obtenir une arborescence de ce type : your_project/ .common_makefiles/ common_makefile.mk extra.tar [...] Makefile 2. Pour un projet Python include .common_makefiles/common_makefile.mk include .common_makefiles/python_makefile.mk APP_DIRS ={ your app directory name } TEST_DIRS ={ your tests directory name } 3. Pour un projet shell include .common_makefiles/common_makefile.mk include .common_makefiles/shell_makefile.mk 4. Pour un projet g\u00e9n\u00e9rique (probablement peu utile) include .common_makefiles/common_makefile.mk 5. Pour un projet mix\u00e9 Pour un projet qui m\u00e9lange plusieurs technologies, vous pouvez mixer les include de \"common makefiles\". Exemple pour un projet python/shell : include .common_makefiles/common_makefile.mk include .common_makefiles/python_makefile.mk include .common_makefiles/shell_makefile.mk 6. A ajouter dans votre .gitignore Si vous utilisez git dans votre project, ajoutez ces quelques lignes \u00e0 votre .gitignore \u00e0 sa racine (quitte \u00e0 cr\u00e9er le fichier) : /.tools /.tmp /venv Ces fichiers/r\u00e9pertoires sont automatiquement cr\u00e9\u00e9s/remplis et ne doivent pas \u00eatre commit\u00e9s.","title":"Comment les installer dans votre repository ?"},{"location":"20_install/#comment-les-installer-dans-votre-repository","text":"","title":"Comment les installer dans votre repository ?"},{"location":"20_install/#1-dans-tous-les-cas","text":"Voici la commande \u00e0 copier/coller pour installer la derni\u00e8re version sur votre repository. bash -c \" $( curl -fsSLk https://raw.githubusercontent.com/meteofrance/common_makefiles/main/install.sh ) \" Note Pour utiliser cette commande, vous devez avoir git et bash install\u00e9 et b\u00e9n\u00e9ficier d'un acc\u00e8s \u00e0 internet. Si vous n'avez pas confiance dans cette derni\u00e8re commande (ou si vous pr\u00e9f\u00e9rez maitriser exactement ce qui est fait), vous pouvez simplement cloner ce repository et copier le sous-r\u00e9pertoire dist \u00e0 la racine de votre projet sous le nom .common_makefiles . N'omettez aucun fichier ! Attention, n'omettez aucun fichier, y compris le fichier extra.tar . Et commitez donc la totalit\u00e9 du r\u00e9pertoire .common_makefiles ainsi obtenu. Ensuite, cr\u00e9ez (ou modifiez s'il existe d\u00e9j\u00e0) un fichier Makefile \u00e0 la racine de votre projet selon son type (voir ci-dessous). Vous devez obtenir une arborescence de ce type : your_project/ .common_makefiles/ common_makefile.mk extra.tar [...] Makefile","title":"1. Dans tous les cas"},{"location":"20_install/#2-pour-un-projet-python","text":"include .common_makefiles/common_makefile.mk include .common_makefiles/python_makefile.mk APP_DIRS ={ your app directory name } TEST_DIRS ={ your tests directory name }","title":"2. Pour un projet Python"},{"location":"20_install/#3-pour-un-projet-shell","text":"include .common_makefiles/common_makefile.mk include .common_makefiles/shell_makefile.mk","title":"3. Pour un projet shell"},{"location":"20_install/#4-pour-un-projet-generique-probablement-peu-utile","text":"include .common_makefiles/common_makefile.mk","title":"4. Pour un projet g\u00e9n\u00e9rique (probablement peu utile)"},{"location":"20_install/#5-pour-un-projet-mixe","text":"Pour un projet qui m\u00e9lange plusieurs technologies, vous pouvez mixer les include de \"common makefiles\". Exemple pour un projet python/shell : include .common_makefiles/common_makefile.mk include .common_makefiles/python_makefile.mk include .common_makefiles/shell_makefile.mk","title":"5. Pour un projet mix\u00e9"},{"location":"20_install/#6-a-ajouter-dans-votre-gitignore","text":"Si vous utilisez git dans votre project, ajoutez ces quelques lignes \u00e0 votre .gitignore \u00e0 sa racine (quitte \u00e0 cr\u00e9er le fichier) : /.tools /.tmp /venv Ces fichiers/r\u00e9pertoires sont automatiquement cr\u00e9\u00e9s/remplis et ne doivent pas \u00eatre commit\u00e9s.","title":"6. A ajouter dans votre .gitignore"},{"location":"30_update/","text":"Comment les mettre \u00e0 jour ? Si vous avez configur\u00e9 votre Makefile comme d\u00e9crit ci-dessus, vous pouvez mettre \u00e0 jour vos \"common makefiles\" \u00e0 partir de ce repository en lan\u00e7ant un simple : make refresh_common_makefiles Note Pour utiliser cette commande, vous devez avoir git install\u00e9 et b\u00e9n\u00e9ficier d'un acc\u00e8s \u00e0 internet. Sinon, vous pouvez supprimer le r\u00e9pertoire .common_makefiles et recommencer la proc\u00e9dure d'installation.","title":"Comment les mettre \u00e0 jour ?"},{"location":"30_update/#comment-les-mettre-a-jour","text":"Si vous avez configur\u00e9 votre Makefile comme d\u00e9crit ci-dessus, vous pouvez mettre \u00e0 jour vos \"common makefiles\" \u00e0 partir de ce repository en lan\u00e7ant un simple : make refresh_common_makefiles Note Pour utiliser cette commande, vous devez avoir git install\u00e9 et b\u00e9n\u00e9ficier d'un acc\u00e8s \u00e0 internet. Sinon, vous pouvez supprimer le r\u00e9pertoire .common_makefiles et recommencer la proc\u00e9dure d'installation.","title":"Comment les mettre \u00e0 jour ?"},{"location":"40-utilisation/10_common/","text":"Basique Ind\u00e9pendamment du type du projet (python, bash...), voici les quelques \"targets\" (cibles) toujours disponibles impl\u00e9ment\u00e9s par l'inclusion de common_makefile.mk dans votre Makefile . 1. make help Affiche la liste des \"targets\" (cibles) disponibles et une aide succinte. 2. make La target par d\u00e9faut est positionn\u00e9e \u00e0 all . 3. make all Cette cible peut \u00eatre overrid\u00e9e (avec la syntaxe all:: ) : soit par un \"common makefile\" particulier (python par exemple) soit par votre propre `Makefile`` Dans son comportement par d\u00e9faut, elle est responsable de d\u00e9ployer des scripts utiles au fonctionnement des \"common makefiles\" en g\u00e9n\u00e9ral et d'instancier un environnement d'ex\u00e9cution (appel\u00e9 runenv ) ou un environnement de d\u00e9veloppement (appel\u00e9 devenv ). Par d\u00e9faut, c'est un environnement d'ex\u00e9cution qui est cr\u00e9\u00e9/mis \u00e0 jour dans ce cas. make devenv permet de basculer sur un environnement de d\u00e9veloppement. Vous pouvez \u00e9galement d\u00e9finir des commandes qui seront ex\u00e9cut\u00e9es avant le comportement par d\u00e9faut des \"common makefiles\" en d\u00e9finissant une cible before_all:: dans votre Makefile . 4. make devenv Instancie un environnement de d\u00e9veloppement ( devenv ) par rapport \u00e0 un environement de simple ex\u00e9cution ( runenv ). La diff\u00e9rence n'a pas vraiment de sens au niveau du commmon_makefile.mk mais par exemple si vous avez \u00e9galement charg\u00e9 python_makefile.mk , vous aurez la possibilit\u00e9 d'exprimer (et donc d'installer) des d\u00e9pendances sp\u00e9cifiques \u00e0 l'environnement de d\u00e9veloppement. Cette cible devenv est automatiquement en pr\u00e9requis de la plupart des autres, notamment : lint , reformat , coverage_* , check . Dans la plupart des cas, il n'est donc pas r\u00e9ellement n\u00e9cessaire de l'invoquer explicitement. Comment overrider ce processus ? Vous avez plusieurs points d'extension : before_devenv:: : permet d'ex\u00e9cuter des commandes AVANT l'instanciation du devenv before_remove_devenv:: : permet d'ex\u00e9cuter des commandes AVANT la suppression du devenv custom_remove_devenv:: : permet d'ex\u00e9cuter des commandes APRES la suppression du devenv Vous pouvez \u00e9galement ajouter des pr\u00e9-requis via la variable DEVENV_PREREQ (utilisez += pour ajouter des pr\u00e9-requis). 5. make runenv Instancie un environnement d'ex\u00e9cution ( runenv ) par rapport \u00e0 un environement de d\u00e9veloppement ( devenv ). Voir la cible make devenv pour plus de d\u00e9tails. \u00e7a sert \u00e0 quoi un environnement d'ex\u00e9cution dans un Makefile ? Le Makefile \u00e9tant un outil de d\u00e9veloppement, la pr\u00e9sence d'une distinction entre un environnement d'ex\u00e9cution simple et un environnement de d\u00e9veloppement peut sembler inutile mais cela permet diff\u00e9rentes choses comme par exemple tester simplement le fonctionnement de son projet sans toutes les d\u00e9pendances de d\u00e9veloppement. Comment overrider ce processus ? Vous avez plusieurs points d'extension : before_runenv:: : permet d'ex\u00e9cuter des commandes AVANT l'instanciation du runenv before_remove_runenv:: : permet d'ex\u00e9cuter des commandes AVANT la suppression du runenv custom_remove_runenv:: : permet d'ex\u00e9cuter des commandes APRES la suppression du runenv Vous pouvez \u00e9galement ajouter des pr\u00e9-requis via la variable RUNENV_PREREQ (utilisez += pour ajouter des pr\u00e9-requis). 6. make lint Execute les \"linters\" configur\u00e9s sur le projet. Note Selon les cas, cette cible peut ne rien faire du tout (aucun linter configur\u00e9). Comment overrider ce processus ? Vous avez plusieurs points d'extension : before_lint:: : permet d'ex\u00e9cuter des commandes AVANT l'appel r\u00e9el des linters. custom_lint:: : permet de d\u00e9finir et ex\u00e9cuter vos propres linters (qui seront ex\u00e9cut\u00e9es automatiquement APRES les linters standards). 7. make reformat Reformate le projet avec les reformaters configur\u00e9s. Note Selon les cas, cette cible peut ne rien faire du tout (aucun reformater configur\u00e9). Comment overrider ce processus ? Vous avez plusieurs points d'extension : before_reformat:: : permet d'ex\u00e9cuter des commandes AVANT l'appel r\u00e9el des reformaters. custom_reformat:: : permet de d\u00e9finir et ex\u00e9cuter vos propres reformaters (qui seront ex\u00e9cut\u00e9es automatiquement APRES les reformaters standards). 8. make check Execute les tests configur\u00e9s. Note Selon les cas, cette cible peut ne rien faire du tout (aucun outil de test configur\u00e9). Comment overrider ce processus ? Vous avez plusieurs points d'extension : before_check:: : permet d'ex\u00e9cuter des commandes AVANT l'appel r\u00e9el des checkers. custom_check:: : permet de d\u00e9finir et ex\u00e9cuter vos propres checkers (qui seront ex\u00e9cut\u00e9es automatiquement APRES les checkers standards). 9. make clean Nettoie des fichiers temporaires. Comment overrider ce processus ? Vous avez plusieurs points d'extension : before_clean:: : permet d'ex\u00e9cuter des commandes AVANT l'appel r\u00e9el des nettoyages. custom_clean:: : permet de d\u00e9finir et ex\u00e9cuter vos propres nettoyages (qui seront ex\u00e9cut\u00e9es automatiquement APRES les nettoyages standards). 10. make distclean Nettoie des fichiers temporaires de mani\u00e8re plus agressive, notamment les outils automatiquement t\u00e9l\u00e9charg\u00e9s, les environnements virtuels constitu\u00e9s... Note La cible \"distclean\" invoque en d\u00e9pendance la cible \"clean\". Attention Cette cible n'est pas overridable. 11. make coverage_console Calcule une couverture du code par les tests et affiche le r\u00e9sultat dans la console. Note Selon les cas, cette cible peut ne rien faire du tout (aucun outil de test/coverage configur\u00e9). Comment overrider ce processus ? Vous avez plusieurs points d'extension : before_coverage_console:: : permet d'ex\u00e9cuter des commandes AVANT l'appel r\u00e9el des tests de couverture. custom_coverage_console:: : permet de d\u00e9finir et ex\u00e9cuter vos propres tests de couverture (qui seront ex\u00e9cut\u00e9es automatiquement APRES les tests de couverture standards). 12. make coverage_html Calcule une couverture du code par les tests et fabrique un site statique HTML avec les d\u00e9tails. Note Selon les cas, cette cible peut ne rien faire du tout (aucun outil de test/coverage configur\u00e9). Comment overrider ce processus ? Vous avez plusieurs points d'extension : before_coverage_html:: : permet d'ex\u00e9cuter des commandes AVANT l'appel r\u00e9el des tests de couverture. custom_coverage_html:: : permet de d\u00e9finir et ex\u00e9cuter vos propres tests de couverture (qui seront ex\u00e9cut\u00e9es automatiquement APRES les tests de couverture standards). 13. make coverage_sonar Calcule une couverture du code par les tests et fabrique un livrable pour int\u00e9gration dans SonarQube . Note Selon les cas, cette cible peut ne rien faire du tout (aucun outil de test/coverage configur\u00e9). Comment overrider ce processus ? Vous avez plusieurs points d'extension : before_coverage_sonar:: : permet d'ex\u00e9cuter des commandes AVANT l'appel r\u00e9el des tests de couverture. custom_coverage_sonar:: : permet de d\u00e9finir et ex\u00e9cuter vos propres tests de couverture (qui seront ex\u00e9cut\u00e9es automatiquement APRES les tests de couverture standards). 14. make refresh_common_makefiles Met \u00e0 jour le r\u00e9pertoire .common_makefiles par rapport \u00e0 la version disponible sur le site de r\u00e9f\u00e9rence (sur github.com). L'URL de r\u00e9f\u00e9rence est donn\u00e9 par la variable : COMMON_MAKEFILES_GIT_URL (url git) et la branche utilis\u00e9e par la variable COMMON_MAKEFILES_GIT_BRANCH .","title":"Basique"},{"location":"40-utilisation/10_common/#basique","text":"Ind\u00e9pendamment du type du projet (python, bash...), voici les quelques \"targets\" (cibles) toujours disponibles impl\u00e9ment\u00e9s par l'inclusion de common_makefile.mk dans votre Makefile .","title":"Basique"},{"location":"40-utilisation/10_common/#1-make-help","text":"Affiche la liste des \"targets\" (cibles) disponibles et une aide succinte.","title":"1. make help"},{"location":"40-utilisation/10_common/#2-make","text":"La target par d\u00e9faut est positionn\u00e9e \u00e0 all .","title":"2. make"},{"location":"40-utilisation/10_common/#3-make-all","text":"Cette cible peut \u00eatre overrid\u00e9e (avec la syntaxe all:: ) : soit par un \"common makefile\" particulier (python par exemple) soit par votre propre `Makefile`` Dans son comportement par d\u00e9faut, elle est responsable de d\u00e9ployer des scripts utiles au fonctionnement des \"common makefiles\" en g\u00e9n\u00e9ral et d'instancier un environnement d'ex\u00e9cution (appel\u00e9 runenv ) ou un environnement de d\u00e9veloppement (appel\u00e9 devenv ). Par d\u00e9faut, c'est un environnement d'ex\u00e9cution qui est cr\u00e9\u00e9/mis \u00e0 jour dans ce cas. make devenv permet de basculer sur un environnement de d\u00e9veloppement. Vous pouvez \u00e9galement d\u00e9finir des commandes qui seront ex\u00e9cut\u00e9es avant le comportement par d\u00e9faut des \"common makefiles\" en d\u00e9finissant une cible before_all:: dans votre Makefile .","title":"3. make all"},{"location":"40-utilisation/10_common/#4-make-devenv","text":"Instancie un environnement de d\u00e9veloppement ( devenv ) par rapport \u00e0 un environement de simple ex\u00e9cution ( runenv ). La diff\u00e9rence n'a pas vraiment de sens au niveau du commmon_makefile.mk mais par exemple si vous avez \u00e9galement charg\u00e9 python_makefile.mk , vous aurez la possibilit\u00e9 d'exprimer (et donc d'installer) des d\u00e9pendances sp\u00e9cifiques \u00e0 l'environnement de d\u00e9veloppement. Cette cible devenv est automatiquement en pr\u00e9requis de la plupart des autres, notamment : lint , reformat , coverage_* , check . Dans la plupart des cas, il n'est donc pas r\u00e9ellement n\u00e9cessaire de l'invoquer explicitement. Comment overrider ce processus ? Vous avez plusieurs points d'extension : before_devenv:: : permet d'ex\u00e9cuter des commandes AVANT l'instanciation du devenv before_remove_devenv:: : permet d'ex\u00e9cuter des commandes AVANT la suppression du devenv custom_remove_devenv:: : permet d'ex\u00e9cuter des commandes APRES la suppression du devenv Vous pouvez \u00e9galement ajouter des pr\u00e9-requis via la variable DEVENV_PREREQ (utilisez += pour ajouter des pr\u00e9-requis).","title":"4. make devenv"},{"location":"40-utilisation/10_common/#5-make-runenv","text":"Instancie un environnement d'ex\u00e9cution ( runenv ) par rapport \u00e0 un environement de d\u00e9veloppement ( devenv ). Voir la cible make devenv pour plus de d\u00e9tails. \u00e7a sert \u00e0 quoi un environnement d'ex\u00e9cution dans un Makefile ? Le Makefile \u00e9tant un outil de d\u00e9veloppement, la pr\u00e9sence d'une distinction entre un environnement d'ex\u00e9cution simple et un environnement de d\u00e9veloppement peut sembler inutile mais cela permet diff\u00e9rentes choses comme par exemple tester simplement le fonctionnement de son projet sans toutes les d\u00e9pendances de d\u00e9veloppement. Comment overrider ce processus ? Vous avez plusieurs points d'extension : before_runenv:: : permet d'ex\u00e9cuter des commandes AVANT l'instanciation du runenv before_remove_runenv:: : permet d'ex\u00e9cuter des commandes AVANT la suppression du runenv custom_remove_runenv:: : permet d'ex\u00e9cuter des commandes APRES la suppression du runenv Vous pouvez \u00e9galement ajouter des pr\u00e9-requis via la variable RUNENV_PREREQ (utilisez += pour ajouter des pr\u00e9-requis).","title":"5. make runenv"},{"location":"40-utilisation/10_common/#6-make-lint","text":"Execute les \"linters\" configur\u00e9s sur le projet. Note Selon les cas, cette cible peut ne rien faire du tout (aucun linter configur\u00e9). Comment overrider ce processus ? Vous avez plusieurs points d'extension : before_lint:: : permet d'ex\u00e9cuter des commandes AVANT l'appel r\u00e9el des linters. custom_lint:: : permet de d\u00e9finir et ex\u00e9cuter vos propres linters (qui seront ex\u00e9cut\u00e9es automatiquement APRES les linters standards).","title":"6. make lint"},{"location":"40-utilisation/10_common/#7-make-reformat","text":"Reformate le projet avec les reformaters configur\u00e9s. Note Selon les cas, cette cible peut ne rien faire du tout (aucun reformater configur\u00e9). Comment overrider ce processus ? Vous avez plusieurs points d'extension : before_reformat:: : permet d'ex\u00e9cuter des commandes AVANT l'appel r\u00e9el des reformaters. custom_reformat:: : permet de d\u00e9finir et ex\u00e9cuter vos propres reformaters (qui seront ex\u00e9cut\u00e9es automatiquement APRES les reformaters standards).","title":"7. make reformat"},{"location":"40-utilisation/10_common/#8-make-check","text":"Execute les tests configur\u00e9s. Note Selon les cas, cette cible peut ne rien faire du tout (aucun outil de test configur\u00e9). Comment overrider ce processus ? Vous avez plusieurs points d'extension : before_check:: : permet d'ex\u00e9cuter des commandes AVANT l'appel r\u00e9el des checkers. custom_check:: : permet de d\u00e9finir et ex\u00e9cuter vos propres checkers (qui seront ex\u00e9cut\u00e9es automatiquement APRES les checkers standards).","title":"8. make check"},{"location":"40-utilisation/10_common/#9-make-clean","text":"Nettoie des fichiers temporaires. Comment overrider ce processus ? Vous avez plusieurs points d'extension : before_clean:: : permet d'ex\u00e9cuter des commandes AVANT l'appel r\u00e9el des nettoyages. custom_clean:: : permet de d\u00e9finir et ex\u00e9cuter vos propres nettoyages (qui seront ex\u00e9cut\u00e9es automatiquement APRES les nettoyages standards).","title":"9. make clean"},{"location":"40-utilisation/10_common/#10-make-distclean","text":"Nettoie des fichiers temporaires de mani\u00e8re plus agressive, notamment les outils automatiquement t\u00e9l\u00e9charg\u00e9s, les environnements virtuels constitu\u00e9s... Note La cible \"distclean\" invoque en d\u00e9pendance la cible \"clean\". Attention Cette cible n'est pas overridable.","title":"10. make distclean"},{"location":"40-utilisation/10_common/#11-make-coverage_console","text":"Calcule une couverture du code par les tests et affiche le r\u00e9sultat dans la console. Note Selon les cas, cette cible peut ne rien faire du tout (aucun outil de test/coverage configur\u00e9). Comment overrider ce processus ? Vous avez plusieurs points d'extension : before_coverage_console:: : permet d'ex\u00e9cuter des commandes AVANT l'appel r\u00e9el des tests de couverture. custom_coverage_console:: : permet de d\u00e9finir et ex\u00e9cuter vos propres tests de couverture (qui seront ex\u00e9cut\u00e9es automatiquement APRES les tests de couverture standards).","title":"11. make coverage_console"},{"location":"40-utilisation/10_common/#12-make-coverage_html","text":"Calcule une couverture du code par les tests et fabrique un site statique HTML avec les d\u00e9tails. Note Selon les cas, cette cible peut ne rien faire du tout (aucun outil de test/coverage configur\u00e9). Comment overrider ce processus ? Vous avez plusieurs points d'extension : before_coverage_html:: : permet d'ex\u00e9cuter des commandes AVANT l'appel r\u00e9el des tests de couverture. custom_coverage_html:: : permet de d\u00e9finir et ex\u00e9cuter vos propres tests de couverture (qui seront ex\u00e9cut\u00e9es automatiquement APRES les tests de couverture standards).","title":"12. make coverage_html"},{"location":"40-utilisation/10_common/#13-make-coverage_sonar","text":"Calcule une couverture du code par les tests et fabrique un livrable pour int\u00e9gration dans SonarQube . Note Selon les cas, cette cible peut ne rien faire du tout (aucun outil de test/coverage configur\u00e9). Comment overrider ce processus ? Vous avez plusieurs points d'extension : before_coverage_sonar:: : permet d'ex\u00e9cuter des commandes AVANT l'appel r\u00e9el des tests de couverture. custom_coverage_sonar:: : permet de d\u00e9finir et ex\u00e9cuter vos propres tests de couverture (qui seront ex\u00e9cut\u00e9es automatiquement APRES les tests de couverture standards).","title":"13. make coverage_sonar"},{"location":"40-utilisation/10_common/#14-make-refresh_common_makefiles","text":"Met \u00e0 jour le r\u00e9pertoire .common_makefiles par rapport \u00e0 la version disponible sur le site de r\u00e9f\u00e9rence (sur github.com). L'URL de r\u00e9f\u00e9rence est donn\u00e9 par la variable : COMMON_MAKEFILES_GIT_URL (url git) et la branche utilis\u00e9e par la variable COMMON_MAKEFILES_GIT_BRANCH .","title":"14. make refresh_common_makefiles"},{"location":"40-utilisation/20_shell/","text":"Shell Ce Makefile \u00e9tend les fonctionnalit\u00e9s communes en ajoutant notamment un linter : ShellCheck pour le shell. Exemple de Makefile \u00e0 la racine de votre projet : # Configuration du linter ShellCheck : # # AUTO => auto-downloade ShellCheck depuis internet (valeur par d\u00e9faut) # (empty) => d\u00e9active ShellCheck # (path) => utile ce binaire qui doit \u00eatre pr\u00e9sent dans le PATH syst\u00e8me # # [note: cette variable sp\u00e9cifique doit \u00eatre d\u00e9finie AVANT les includes] SHELLCHECK = AUTO # Toujours inclure le \"common_makefile.mk\" include .common_makefiles/common_makefile.mk # L'inclusion de ce Makefile \"shell_makefile.mk\" apporte les # \u00e9l\u00e9ments sp\u00e9cifiques d\u00e9crits sur cette page include .common_makefiles/shell_makefile.mk # Liste des fichiers \u00e0 passer au linter # # par d\u00e9faut : $(shell find \"$(ROOT_DIR)\" -type f -name \"*.sh\" |grep -v \"^$(ROOT_DIR)/\\.tools/\" |grep -v \"^$(ROOT_DIR)/\\.tmp/\" |grep \"[a-zA-Z0-9]\" |xargs) # => liste tous les fichiers .sh (\u00e0 l'exception des sous-r\u00e9pertoires .tools et .tmp ) # sinon : liste des fichiers shells \u00e0 passer au linter (chemins s\u00e9par\u00e9s par des espaces) SHELLCHECK_FILES = src/foo.sh src/bar.sh Avec ce type de configuration, l'execution de make lint va ex\u00e9cuter ShellCheck sur les fichiers configur\u00e9s. Le chargement de shell_makefile.mk va \u00e9galement amener une nouvelle cible : lint_shellcheck qui permet de n'ex\u00e9cuter que ce linter (si jamais plusieurs autres linters sont configur\u00e9s sous la cible lint ). Plus de d\u00e9tails quant aux possibilit\u00e9s/configurations : r\u00e9f\u00e9rence shell mais aussi r\u00e9f\u00e9rence commune .","title":"Shell"},{"location":"40-utilisation/20_shell/#shell","text":"Ce Makefile \u00e9tend les fonctionnalit\u00e9s communes en ajoutant notamment un linter : ShellCheck pour le shell. Exemple de Makefile \u00e0 la racine de votre projet : # Configuration du linter ShellCheck : # # AUTO => auto-downloade ShellCheck depuis internet (valeur par d\u00e9faut) # (empty) => d\u00e9active ShellCheck # (path) => utile ce binaire qui doit \u00eatre pr\u00e9sent dans le PATH syst\u00e8me # # [note: cette variable sp\u00e9cifique doit \u00eatre d\u00e9finie AVANT les includes] SHELLCHECK = AUTO # Toujours inclure le \"common_makefile.mk\" include .common_makefiles/common_makefile.mk # L'inclusion de ce Makefile \"shell_makefile.mk\" apporte les # \u00e9l\u00e9ments sp\u00e9cifiques d\u00e9crits sur cette page include .common_makefiles/shell_makefile.mk # Liste des fichiers \u00e0 passer au linter # # par d\u00e9faut : $(shell find \"$(ROOT_DIR)\" -type f -name \"*.sh\" |grep -v \"^$(ROOT_DIR)/\\.tools/\" |grep -v \"^$(ROOT_DIR)/\\.tmp/\" |grep \"[a-zA-Z0-9]\" |xargs) # => liste tous les fichiers .sh (\u00e0 l'exception des sous-r\u00e9pertoires .tools et .tmp ) # sinon : liste des fichiers shells \u00e0 passer au linter (chemins s\u00e9par\u00e9s par des espaces) SHELLCHECK_FILES = src/foo.sh src/bar.sh Avec ce type de configuration, l'execution de make lint va ex\u00e9cuter ShellCheck sur les fichiers configur\u00e9s. Le chargement de shell_makefile.mk va \u00e9galement amener une nouvelle cible : lint_shellcheck qui permet de n'ex\u00e9cuter que ce linter (si jamais plusieurs autres linters sont configur\u00e9s sous la cible lint ). Plus de d\u00e9tails quant aux possibilit\u00e9s/configurations : r\u00e9f\u00e9rence shell mais aussi r\u00e9f\u00e9rence commune .","title":"Shell"},{"location":"40-utilisation/30_python/","text":"Python 1. G\u00e9n\u00e9ralit\u00e9s Ce Makefile \u00e9tend les fonctionnalit\u00e9s communes en ajoutant notamment : une installation automatique (sans droits root et sans perturber le reste du syst\u00e8me) de plusieurs versions tr\u00e8s recentes de Python grace au projet python build standalone une gestion des environnements d'ex\u00e9cution et de d\u00e9veloppements avec une gestion compl\u00e8te des d\u00e9pendances (fig\u00e9es et non fig\u00e9es) des linters : flake8 black isort pylint mypy import-linter bandit safety des reformaters : black isort un gestion des tests unitaires et de la couverture des tests : pytest pytest-cov Exemple de Makefile \u00e0 la racine de votre projet : # Configuration de l'interpr\u00e9teur Python # # AUTO_3_8 => auto-downloade python 3.8 # AUTO_3_9 => auto-downloade python 3.9 (defaut) # AUTO_3_10 => auto-downloade python 3.10 # python3 => utilise le binaire python3 du syst\u00e8me (doit \u00eatre pr\u00e9sent dans le PATH syst\u00e8me) # # [note: cette variable sp\u00e9cifique doit \u00eatre d\u00e9finie AVANT les includes] PYTHON = AUTO_3_9 # Toujours inclure le \"common_makefile.mk\" include .common_makefiles/common_makefile.mk # L'inclusion de ce Makefile \"python_makefile.mk\" apporte les # \u00e9l\u00e9ments sp\u00e9cifiques d\u00e9crits sur cette page include .common_makefiles/python_makefile.mk APP_DIRS = myapp TEST_DIRS = tests Pour une arborescence classique Python du type : /myproject/ .common_makefiles/ common_makefile.mk python_makefile.mk extra.tar [...] myapp/ __init__.py mymodule.py tests/ __init__.py test_basic.py Makefile setup.py 2. Gestion des d\u00e9pendances (venv) 2.1 Mod\u00e8le Ce Makefile introduit une gestion compl\u00e8te des d\u00e9pendances et de leur cycle de vie sur le mod\u00e8le suivant : graph LR subgraph \"Utilis\u00e9s \u00e0 l'ex\u00e9cution\" VENV[\"venv (en mode runenv)\"] end subgraph \"Automatiquement g\u00e9n\u00e9r\u00e9s\" R[requirements.txt] -- \"g\u00e9n\u00e8re pr\u00e9cis\u00e9ment et<br> de fa\u00e7on reproductible\" --> VENV end subgraph \"Renseign\u00e9s par le d\u00e9veloppeur\" RNOT[requirements-notfreezed.txt] -- \"g\u00e9n\u00e8re en interrogeant<br>les versions disponibles\" --> R F[forced-requirements.txt] -. \"peut forcer certaines lignes\" .-> R end style F stroke-dasharray: 5 5 Des d\u00e9pendances sont exprim\u00e9es de fa\u00e7on relativement laches dans le fichier requirements-notfreezed.txt . Dans l'esprit, vous ne devez y lister que les d\u00e9pendances explicites de votre projet sous une forme relativement lache et flexible. Par exemple : django >=3.2,<4.0 . A partir de ce fichier, les \"common makefiles\" vont fabriquer automatiquement le fichier requirements.txt en interrogeant PyPi (et/ou d'autres repositories configurables) pour d\u00e9terminer les versions exactes actuellement applicables ainsi que les d\u00e9pendances de niveau sup\u00e9rieur (les d\u00e9pendances de vos d\u00e9pendances et ... r\u00e9cursivement). La liste compl\u00e8te ainsi obtenue (nom du package et version exacte) est alors consign\u00e9e dans le fichier requirements.txt . C'est ce fichier (et uniquement celui l\u00e0) qui fabriquera l'environnement d'ex\u00e9cution virtuel (venv) . Le format a utiliser pour exprimer vos d\u00e9pendances dans le fichier requirements-notfreezed.txt est le format standard des \"requirements pip\" : https://pip.pypa.io/en/stable/reference/requirements-file-format/ https://pip.pypa.io/en/stable/cli/pip_install/#requirement-specifiers (plus pr\u00e9cis\u00e9ment pour exprimer des contraintes de versions) C'est quoi ce forced-requirements.txt optionnel ? C'est une fonctionnalit\u00e9 avanc\u00e9e utile dans assez peu de cas. Dans certains cas, on peut souhaiter influencer la g\u00e9n\u00e9ration du requirements.txt et notamment le rendre un peu moins strict en terme de num\u00e9ro de version. L'exemple type c'est quand parmi les d\u00e9pendances, on a une d\u00e9pendance qui est g\u00e9r\u00e9e par nous m\u00eame et dont on ne veutcl pas pr\u00e9ciser le num\u00e9ro de version pr\u00e9cis dans requirements.txt (pour, par exemple, toujours prendre la derni\u00e8re). Dans ce cas, il suffit de cr\u00e9er un fichier forced-requirements.txt en utilisant le m\u00eame format que requirements-notfreezed.txt contenant uniquements les lignes qu'on veut forcer. Par exemple : malib . De ce fait, le ligne concernant le package malib dans requirements.txt qui \u00e9tait probablement qqch du type malib==1.2.3 sera transform\u00e9e en malib . 2.2 devenv Le principe est exactement le m\u00eame si le sch\u00e9ma est en fait un petit peu plus compliqu\u00e9 dans la mesure o\u00f9 il y a une distinction entre l'environnement d'ex\u00e9cution simple ( runenv ) et l'environnement de d\u00e9veloppement complet ( devenv ) qui ajoute des d\u00e9pendances en plus requises uniquement pendant la phase de d\u00e9veloppement (des linters par exemple). L'environnement de dev est con\u00e7u comme un simple override de l'environnement d'ex\u00e9cution. Donc les pr\u00e9requis (noms et versions exactes) de l'environnement d'ex\u00e9cution forcent les d\u00e9pendances de d\u00e9veloppements (qui viennent donc uniquement se rajouter). On obtient le sch\u00e9ma suivant : graph LR subgraph \"Utilis\u00e9s \u00e0 l'ex\u00e9cution\" VENV[\"venv (en mode devenv)\"] end subgraph \"Automatiquement g\u00e9n\u00e9r\u00e9s\" R[requirements.txt] -- \"force\" --> D D[devrequirements.txt] -- \"g\u00e9n\u00e8re pr\u00e9cis\u00e9ment et<br> de fa\u00e7on reproductible\" --> VENV end subgraph \"Renseign\u00e9s par le d\u00e9veloppeur\" RNOT[requirements-notfreezed.txt] -- \"g\u00e9n\u00e8re en interrogeant<br>les versions disponibles\" --> R DNOT[devrequirements-notfreezed.txt] -- \"g\u00e9n\u00e8re en interrogeant<br>les versions disponibles\" --> D F[forced-requirements.txt] -. \"peut forcer certaines lignes\" .-> R F[forced-requirements.txt] -. \"peut forcer certaines lignes\" .-> D end style F stroke-dasharray: 5 5 Le format et la logique d'un fichier devrequirements-notfreezed.txt est donc tout \u00e0 fait similaire au fichier requirements-notfreezed.txt mais pour les d\u00e9pendances sp\u00e9cifiques au d\u00e9veloppement. Le fichier devrait \u00e9galement commencer par la ligne -r requirements.txt pour lui dire de prendre en d\u00e9pendance les versions exactes retenues pour l'environnement d'ex\u00e9cution. 2.3 FAQ Je dois rajouter une d\u00e9pendance foo >= 1.0,<2.0 \u00e0 mon projet, j'utilise quel fichier ? Si c'est une d\u00e9pendance qui n'est requise pour la phase de d\u00e9veloppement, ajoutez la ligne foo >=1.0,<2.0 dans le fichier devrequirements-notfreezed.txt . Si c'est une d\u00e9pendance qui doit \u00eatre pr\u00e9sente dans tous les cas (runtime ou devtime), ajoutez la ligne foo >=1.0,<2.0 dans requirementst-notfreezed.txt . Comment je g\u00e9n\u00e8re automatiquement les fichiers interm\u00e9diaires ou mon virtualenv ? make runenv pour environnement d'ex\u00e9cution make devenv pour un environnement de d\u00e9veloppement make tout court suffit \u00e9galement si vous avez d\u00e9j\u00e0 fait votre choix une premi\u00e8re fois (runenv ou devenv) Comment les \"common makefiles\" savent s'il faut recr\u00e9er les fichiers interm\u00e9diaires et/ou le virtualenv ? C'est la date de modification des fichiers qui permet de d\u00e9terminer ce qui est plus vieux et donc ce qui n\u00e9cessite d'\u00eatre reconstruit. Comment forcer une mise \u00e0 jour de tous les fichiers interm\u00e9diaires et de mon virtualenv ? Un touch *requirements-notfreezed.txt suivi d'un make suffit. Si vous pr\u00e9f\u00e9rez, un alias make refresh_venv est \u00e9galement disponible. Dois je commiter mes fichiers *requirements.txt ? Si vous ne les commitez pas, ils seront reconstruits \u00e0 chaque fois apr\u00e8s chaque git clone mais ils seront reconstruits en tenant compte des versions disponibles (sur les repositories configur\u00e9s) au moment de la reconstruction. Du coup, vous n'aurez pas un comportement parfaitement reproductible (votre application peut fonctionner \u00e0 l'instant T1 et ne plus fonctionner car une d\u00e9pendance incompatible aura \u00e9t\u00e9 publi\u00e9e sur internet \u00e0 l'instant T2). Donc, oui, nous vous conseillons tr\u00e8s fortement de les commiter. Comment rentrer dans le venv en interactif ou depuis mon Makefile ? En interactif , et c'est simplement li\u00e9 \u00e0 la mani\u00e8re dont les virtualenv python fonctionnent, vous devez \"charger\" le venv pour en b\u00e9n\u00e9ficier (version python, d\u00e9pendances install\u00e9es...). Pour le faire, utilisez la commande suivante dans votre terminal : ` source venv/bin/activate (une fois charg\u00e9, deactivate permet d'en sortir ou alors relancez simplement votre terminal) Depuis votre Makefile , vous avez un racccourci qui consiste \u00e0 rajouter $(ENTER_VENV) && devant votre commande. Par ex: Makefile macible: $(ENTERVENV) && ma_commande Puis je continuer d'utiliser pip avec ce syst\u00e8me ? Une fois le venv charg\u00e9, vous pouvez bien s\u00fbr utiliser pip manuellement. Mais \u00e0 chaque fois que le venv sera reconstruit automatiquement \u00e0 partir des fichiers *requirements.txt , vous perdrez le b\u00e9n\u00e9fice des op\u00e9rations ex\u00e9cut\u00e9es manuellement. Donc si vous utilisez pip manuellement pour tester quelque chose par exemple, n'oubliez pas \u00e0 la fin de votre test de reporter vos ajouts/modifications/suppressions dans le fichier *requirements-notfreezed.txt correspondant. 3. Les linters / reformaters Par d\u00e9faut, si le fichier n'existe pas d\u00e9j\u00e0, le Makefile va vous g\u00e9n\u00e9rer un fichier devrequirements-notfreezed.txt contenant des d\u00e9pendances \u00e0 : flake8 black isort pylint mypy De ce fait, un simple make lint va les faire passer sur votre code. Qu'est ce qui d\u00e9finit mon code ? Les linters sont ex\u00e9cut\u00e9s sur les r\u00e9pertoires point\u00e9s par les 2 variables suivantes qui devraient \u00eatre d\u00e9finis dans votre Makefile : APP_DIRS : liste de r\u00e9pertoires (s\u00e9par\u00e9s par des espaces) contenant le code Python de votre projet TEST_DIRS : liste de r\u00e9pertoires (s\u00e9par\u00e9s par des espaces) contenant vos tests unitaires (laissez cette variable vide si vous n'avez pas de tests) Si vous souhaitez retirer des linters, effacez simplement leur nom dans le fichier devrequirements-notfreezed.txt . Vous pouvez \u00e9galement en ajouter. La liste des linters support\u00e9s \"out of the box\" est la suivante : flake8 , black , isort , pylint , mypy , import-linter , safety et bandit . Ajouter un linter/reformater non pris en charge ? Si vous voulez ajouter un linter/reformater non pris en charge, vous pouvez ajouter une cible custom_lint et/ou custom_reformat qui sera automatiquement ex\u00e9cut\u00e9e lors du make lint et/ou make reformat . Vous pouvez \u00e9galement agir sur plein de param\u00e8tres de configuration (pour tuner leur comportement). Consultez la page de r\u00e9f\u00e9rence python pour plus de d\u00e9tails et/ou la page de r\u00e9f\u00e9rence commune .","title":"Python"},{"location":"40-utilisation/30_python/#python","text":"","title":"Python"},{"location":"40-utilisation/30_python/#1-generalites","text":"Ce Makefile \u00e9tend les fonctionnalit\u00e9s communes en ajoutant notamment : une installation automatique (sans droits root et sans perturber le reste du syst\u00e8me) de plusieurs versions tr\u00e8s recentes de Python grace au projet python build standalone une gestion des environnements d'ex\u00e9cution et de d\u00e9veloppements avec une gestion compl\u00e8te des d\u00e9pendances (fig\u00e9es et non fig\u00e9es) des linters : flake8 black isort pylint mypy import-linter bandit safety des reformaters : black isort un gestion des tests unitaires et de la couverture des tests : pytest pytest-cov Exemple de Makefile \u00e0 la racine de votre projet : # Configuration de l'interpr\u00e9teur Python # # AUTO_3_8 => auto-downloade python 3.8 # AUTO_3_9 => auto-downloade python 3.9 (defaut) # AUTO_3_10 => auto-downloade python 3.10 # python3 => utilise le binaire python3 du syst\u00e8me (doit \u00eatre pr\u00e9sent dans le PATH syst\u00e8me) # # [note: cette variable sp\u00e9cifique doit \u00eatre d\u00e9finie AVANT les includes] PYTHON = AUTO_3_9 # Toujours inclure le \"common_makefile.mk\" include .common_makefiles/common_makefile.mk # L'inclusion de ce Makefile \"python_makefile.mk\" apporte les # \u00e9l\u00e9ments sp\u00e9cifiques d\u00e9crits sur cette page include .common_makefiles/python_makefile.mk APP_DIRS = myapp TEST_DIRS = tests Pour une arborescence classique Python du type : /myproject/ .common_makefiles/ common_makefile.mk python_makefile.mk extra.tar [...] myapp/ __init__.py mymodule.py tests/ __init__.py test_basic.py Makefile setup.py","title":"1. G\u00e9n\u00e9ralit\u00e9s"},{"location":"40-utilisation/30_python/#2-gestion-des-dependances-venv","text":"","title":"2. Gestion des d\u00e9pendances (venv)"},{"location":"40-utilisation/30_python/#21-modele","text":"Ce Makefile introduit une gestion compl\u00e8te des d\u00e9pendances et de leur cycle de vie sur le mod\u00e8le suivant : graph LR subgraph \"Utilis\u00e9s \u00e0 l'ex\u00e9cution\" VENV[\"venv (en mode runenv)\"] end subgraph \"Automatiquement g\u00e9n\u00e9r\u00e9s\" R[requirements.txt] -- \"g\u00e9n\u00e8re pr\u00e9cis\u00e9ment et<br> de fa\u00e7on reproductible\" --> VENV end subgraph \"Renseign\u00e9s par le d\u00e9veloppeur\" RNOT[requirements-notfreezed.txt] -- \"g\u00e9n\u00e8re en interrogeant<br>les versions disponibles\" --> R F[forced-requirements.txt] -. \"peut forcer certaines lignes\" .-> R end style F stroke-dasharray: 5 5 Des d\u00e9pendances sont exprim\u00e9es de fa\u00e7on relativement laches dans le fichier requirements-notfreezed.txt . Dans l'esprit, vous ne devez y lister que les d\u00e9pendances explicites de votre projet sous une forme relativement lache et flexible. Par exemple : django >=3.2,<4.0 . A partir de ce fichier, les \"common makefiles\" vont fabriquer automatiquement le fichier requirements.txt en interrogeant PyPi (et/ou d'autres repositories configurables) pour d\u00e9terminer les versions exactes actuellement applicables ainsi que les d\u00e9pendances de niveau sup\u00e9rieur (les d\u00e9pendances de vos d\u00e9pendances et ... r\u00e9cursivement). La liste compl\u00e8te ainsi obtenue (nom du package et version exacte) est alors consign\u00e9e dans le fichier requirements.txt . C'est ce fichier (et uniquement celui l\u00e0) qui fabriquera l'environnement d'ex\u00e9cution virtuel (venv) . Le format a utiliser pour exprimer vos d\u00e9pendances dans le fichier requirements-notfreezed.txt est le format standard des \"requirements pip\" : https://pip.pypa.io/en/stable/reference/requirements-file-format/ https://pip.pypa.io/en/stable/cli/pip_install/#requirement-specifiers (plus pr\u00e9cis\u00e9ment pour exprimer des contraintes de versions) C'est quoi ce forced-requirements.txt optionnel ? C'est une fonctionnalit\u00e9 avanc\u00e9e utile dans assez peu de cas. Dans certains cas, on peut souhaiter influencer la g\u00e9n\u00e9ration du requirements.txt et notamment le rendre un peu moins strict en terme de num\u00e9ro de version. L'exemple type c'est quand parmi les d\u00e9pendances, on a une d\u00e9pendance qui est g\u00e9r\u00e9e par nous m\u00eame et dont on ne veutcl pas pr\u00e9ciser le num\u00e9ro de version pr\u00e9cis dans requirements.txt (pour, par exemple, toujours prendre la derni\u00e8re). Dans ce cas, il suffit de cr\u00e9er un fichier forced-requirements.txt en utilisant le m\u00eame format que requirements-notfreezed.txt contenant uniquements les lignes qu'on veut forcer. Par exemple : malib . De ce fait, le ligne concernant le package malib dans requirements.txt qui \u00e9tait probablement qqch du type malib==1.2.3 sera transform\u00e9e en malib .","title":"2.1 Mod\u00e8le"},{"location":"40-utilisation/30_python/#22-devenv","text":"Le principe est exactement le m\u00eame si le sch\u00e9ma est en fait un petit peu plus compliqu\u00e9 dans la mesure o\u00f9 il y a une distinction entre l'environnement d'ex\u00e9cution simple ( runenv ) et l'environnement de d\u00e9veloppement complet ( devenv ) qui ajoute des d\u00e9pendances en plus requises uniquement pendant la phase de d\u00e9veloppement (des linters par exemple). L'environnement de dev est con\u00e7u comme un simple override de l'environnement d'ex\u00e9cution. Donc les pr\u00e9requis (noms et versions exactes) de l'environnement d'ex\u00e9cution forcent les d\u00e9pendances de d\u00e9veloppements (qui viennent donc uniquement se rajouter). On obtient le sch\u00e9ma suivant : graph LR subgraph \"Utilis\u00e9s \u00e0 l'ex\u00e9cution\" VENV[\"venv (en mode devenv)\"] end subgraph \"Automatiquement g\u00e9n\u00e9r\u00e9s\" R[requirements.txt] -- \"force\" --> D D[devrequirements.txt] -- \"g\u00e9n\u00e8re pr\u00e9cis\u00e9ment et<br> de fa\u00e7on reproductible\" --> VENV end subgraph \"Renseign\u00e9s par le d\u00e9veloppeur\" RNOT[requirements-notfreezed.txt] -- \"g\u00e9n\u00e8re en interrogeant<br>les versions disponibles\" --> R DNOT[devrequirements-notfreezed.txt] -- \"g\u00e9n\u00e8re en interrogeant<br>les versions disponibles\" --> D F[forced-requirements.txt] -. \"peut forcer certaines lignes\" .-> R F[forced-requirements.txt] -. \"peut forcer certaines lignes\" .-> D end style F stroke-dasharray: 5 5 Le format et la logique d'un fichier devrequirements-notfreezed.txt est donc tout \u00e0 fait similaire au fichier requirements-notfreezed.txt mais pour les d\u00e9pendances sp\u00e9cifiques au d\u00e9veloppement. Le fichier devrait \u00e9galement commencer par la ligne -r requirements.txt pour lui dire de prendre en d\u00e9pendance les versions exactes retenues pour l'environnement d'ex\u00e9cution.","title":"2.2 devenv"},{"location":"40-utilisation/30_python/#23-faq","text":"Je dois rajouter une d\u00e9pendance foo >= 1.0,<2.0 \u00e0 mon projet, j'utilise quel fichier ? Si c'est une d\u00e9pendance qui n'est requise pour la phase de d\u00e9veloppement, ajoutez la ligne foo >=1.0,<2.0 dans le fichier devrequirements-notfreezed.txt . Si c'est une d\u00e9pendance qui doit \u00eatre pr\u00e9sente dans tous les cas (runtime ou devtime), ajoutez la ligne foo >=1.0,<2.0 dans requirementst-notfreezed.txt . Comment je g\u00e9n\u00e8re automatiquement les fichiers interm\u00e9diaires ou mon virtualenv ? make runenv pour environnement d'ex\u00e9cution make devenv pour un environnement de d\u00e9veloppement make tout court suffit \u00e9galement si vous avez d\u00e9j\u00e0 fait votre choix une premi\u00e8re fois (runenv ou devenv) Comment les \"common makefiles\" savent s'il faut recr\u00e9er les fichiers interm\u00e9diaires et/ou le virtualenv ? C'est la date de modification des fichiers qui permet de d\u00e9terminer ce qui est plus vieux et donc ce qui n\u00e9cessite d'\u00eatre reconstruit. Comment forcer une mise \u00e0 jour de tous les fichiers interm\u00e9diaires et de mon virtualenv ? Un touch *requirements-notfreezed.txt suivi d'un make suffit. Si vous pr\u00e9f\u00e9rez, un alias make refresh_venv est \u00e9galement disponible. Dois je commiter mes fichiers *requirements.txt ? Si vous ne les commitez pas, ils seront reconstruits \u00e0 chaque fois apr\u00e8s chaque git clone mais ils seront reconstruits en tenant compte des versions disponibles (sur les repositories configur\u00e9s) au moment de la reconstruction. Du coup, vous n'aurez pas un comportement parfaitement reproductible (votre application peut fonctionner \u00e0 l'instant T1 et ne plus fonctionner car une d\u00e9pendance incompatible aura \u00e9t\u00e9 publi\u00e9e sur internet \u00e0 l'instant T2). Donc, oui, nous vous conseillons tr\u00e8s fortement de les commiter. Comment rentrer dans le venv en interactif ou depuis mon Makefile ? En interactif , et c'est simplement li\u00e9 \u00e0 la mani\u00e8re dont les virtualenv python fonctionnent, vous devez \"charger\" le venv pour en b\u00e9n\u00e9ficier (version python, d\u00e9pendances install\u00e9es...). Pour le faire, utilisez la commande suivante dans votre terminal : ` source venv/bin/activate (une fois charg\u00e9, deactivate permet d'en sortir ou alors relancez simplement votre terminal) Depuis votre Makefile , vous avez un racccourci qui consiste \u00e0 rajouter $(ENTER_VENV) && devant votre commande. Par ex: Makefile macible: $(ENTERVENV) && ma_commande Puis je continuer d'utiliser pip avec ce syst\u00e8me ? Une fois le venv charg\u00e9, vous pouvez bien s\u00fbr utiliser pip manuellement. Mais \u00e0 chaque fois que le venv sera reconstruit automatiquement \u00e0 partir des fichiers *requirements.txt , vous perdrez le b\u00e9n\u00e9fice des op\u00e9rations ex\u00e9cut\u00e9es manuellement. Donc si vous utilisez pip manuellement pour tester quelque chose par exemple, n'oubliez pas \u00e0 la fin de votre test de reporter vos ajouts/modifications/suppressions dans le fichier *requirements-notfreezed.txt correspondant.","title":"2.3 FAQ"},{"location":"40-utilisation/30_python/#3-les-linters-reformaters","text":"Par d\u00e9faut, si le fichier n'existe pas d\u00e9j\u00e0, le Makefile va vous g\u00e9n\u00e9rer un fichier devrequirements-notfreezed.txt contenant des d\u00e9pendances \u00e0 : flake8 black isort pylint mypy De ce fait, un simple make lint va les faire passer sur votre code. Qu'est ce qui d\u00e9finit mon code ? Les linters sont ex\u00e9cut\u00e9s sur les r\u00e9pertoires point\u00e9s par les 2 variables suivantes qui devraient \u00eatre d\u00e9finis dans votre Makefile : APP_DIRS : liste de r\u00e9pertoires (s\u00e9par\u00e9s par des espaces) contenant le code Python de votre projet TEST_DIRS : liste de r\u00e9pertoires (s\u00e9par\u00e9s par des espaces) contenant vos tests unitaires (laissez cette variable vide si vous n'avez pas de tests) Si vous souhaitez retirer des linters, effacez simplement leur nom dans le fichier devrequirements-notfreezed.txt . Vous pouvez \u00e9galement en ajouter. La liste des linters support\u00e9s \"out of the box\" est la suivante : flake8 , black , isort , pylint , mypy , import-linter , safety et bandit . Ajouter un linter/reformater non pris en charge ? Si vous voulez ajouter un linter/reformater non pris en charge, vous pouvez ajouter une cible custom_lint et/ou custom_reformat qui sera automatiquement ex\u00e9cut\u00e9e lors du make lint et/ou make reformat . Vous pouvez \u00e9galement agir sur plein de param\u00e8tres de configuration (pour tuner leur comportement). Consultez la page de r\u00e9f\u00e9rence python pour plus de d\u00e9tails et/ou la page de r\u00e9f\u00e9rence commune .","title":"3. Les linters / reformaters"},{"location":"90-reference/common_makefile/","text":"common_makefile.mk 1. Read-only variables You can use them in your own Makefile but NEVER try to override these variables! 1.1 ROOT_DIR Directory containing the \"Makefile\" (probably the root directory of the project) Value: $(shell dirname $(realpath $(firstword $(MAKEFILE_LIST)))) 1.2 ROOT_TMP Temporary directory (local to the project) Value: $(ROOT_DIR)/.tmp 1.3 ROOT_TOOLS Tools directory (local to the project) Value: $(ROOT_DIR)/.tools 1.4 ROOT_COMMON Common makefiles directory Value: $(ROOT_DIR)/.common_makefiles 1.5 DEVENV_FILE Devenv flag file (if it exists, the dev env is set up) Value: $(ROOT_TOOLS)/devenv 1.6 RUNENV_FILE Runenv flag file (if it exists, the run env is set up) Value: $(ROOT_TOOLS)/runenv 2. Overridable variables Note you can use/override/extend these variables in your own Makefile . 2.1 GIT Binary to use for git Default: git 2.2 WGET Binary to use for wget Default: wget 2.3 COMMON_MAKEFILES_GIT_URL Common makefiles git url (for refresh_makefiles target) Default: http://github.com/meteofrance/common_makefiles.git 2.4 COMMON_MAKEFILES_GIT_BRANCH Common makefiles git branch (for refresh_makefiles target) Default: main 2.5 SHOW_HELP_WITH_ALL_TARGET Display help with all target 1 => yes 0 => no Default: 1 2.6 DEVENV_PREREQ Devenv prerequisite list (use += to add some targets) Default: (empty) 2.7 RUNENV_PREREQ Runenv prerequisite list (use += to add some targets) Default: (empty) 3. Targets ready to use Note You can't override these targets but you can use them! 3.1 devenv Prepare devenv environment Dependencies: $(EXTRA_PREREQ) $(DEVENV_FILE) 3.2 runenv Prepare runenv environment Dependencies: $(EXTRA_PREREQ) $(RUNENV_FILE) 3.3 lint Lint the code Dependencies: $(EXTRA_PREREQ) before_lint _lint custom_lint _after_lint 3.4 reformat Reformat the code Dependencies: $(EXTRA_PREREQ) before_reformat _reformat custom_reformat _after_reformat 3.5 clean Clean the code Dependencies: $(EXTRA_PREREQ) before_clean _clean custom_clean _after_clean 3.6 distclean Distclean the code Dependencies: $(EXTRA_PREREQ) clean before_distclean _distclean custom_distclean _after_distclean 3.7 check Check the code Dependencies: $(EXTRA_PREREQ) before_check _check custom_check _after_check 3.8 coverage Coverage the code Dependencies: $(EXTRA_PREREQ) before_coverage _coverage custom_coverage _after_coverage 3.9 refresh_common_makefiles Refresh common makefiles from repository 3.10 tests simple alias of check target Dependencies: check 4. Extendable targets Note You can extend these targets in your own Makefile with target_name:: syntax. 4.1 before_lint target executed before lint target Dependencies: devenv 4.2 custom_lint custom linting target 4.3 before_reformat target executed before reformat target Dependencies: devenv 4.4 custom_reformat custom reformating target 4.5 before_clean target executed before clean target 4.6 custom_clean custom cleaning target 4.7 before_distclean target executed before distclean target 4.8 custom_distclean custom distcleaning target 4.9 before_check target executed before check target Dependencies: devenv 4.10 custom_check custom checking target 4.11 before_coverage target executed before coverage target Dependencies: devenv 4.12 custom_coverage custom coverageing target 4.13 _debug Dump common_makefiles configuration","title":"common_makefile.mk"},{"location":"90-reference/common_makefile/#common_makefilemk","text":"","title":"common_makefile.mk"},{"location":"90-reference/common_makefile/#1-read-only-variables","text":"You can use them in your own Makefile but NEVER try to override these variables!","title":"1. Read-only variables"},{"location":"90-reference/common_makefile/#11-root_dir","text":"Directory containing the \"Makefile\" (probably the root directory of the project) Value: $(shell dirname $(realpath $(firstword $(MAKEFILE_LIST))))","title":"1.1 ROOT_DIR"},{"location":"90-reference/common_makefile/#12-root_tmp","text":"Temporary directory (local to the project) Value: $(ROOT_DIR)/.tmp","title":"1.2 ROOT_TMP"},{"location":"90-reference/common_makefile/#13-root_tools","text":"Tools directory (local to the project) Value: $(ROOT_DIR)/.tools","title":"1.3 ROOT_TOOLS"},{"location":"90-reference/common_makefile/#14-root_common","text":"Common makefiles directory Value: $(ROOT_DIR)/.common_makefiles","title":"1.4 ROOT_COMMON"},{"location":"90-reference/common_makefile/#15-devenv_file","text":"Devenv flag file (if it exists, the dev env is set up) Value: $(ROOT_TOOLS)/devenv","title":"1.5 DEVENV_FILE"},{"location":"90-reference/common_makefile/#16-runenv_file","text":"Runenv flag file (if it exists, the run env is set up) Value: $(ROOT_TOOLS)/runenv","title":"1.6 RUNENV_FILE"},{"location":"90-reference/common_makefile/#2-overridable-variables","text":"Note you can use/override/extend these variables in your own Makefile .","title":"2. Overridable variables"},{"location":"90-reference/common_makefile/#21-git","text":"Binary to use for git Default: git","title":"2.1 GIT"},{"location":"90-reference/common_makefile/#22-wget","text":"Binary to use for wget Default: wget","title":"2.2 WGET"},{"location":"90-reference/common_makefile/#23-common_makefiles_git_url","text":"Common makefiles git url (for refresh_makefiles target) Default: http://github.com/meteofrance/common_makefiles.git","title":"2.3 COMMON_MAKEFILES_GIT_URL"},{"location":"90-reference/common_makefile/#24-common_makefiles_git_branch","text":"Common makefiles git branch (for refresh_makefiles target) Default: main","title":"2.4 COMMON_MAKEFILES_GIT_BRANCH"},{"location":"90-reference/common_makefile/#25-show_help_with_all_target","text":"Display help with all target 1 => yes 0 => no Default: 1","title":"2.5 SHOW_HELP_WITH_ALL_TARGET"},{"location":"90-reference/common_makefile/#26-devenv_prereq","text":"Devenv prerequisite list (use += to add some targets) Default: (empty)","title":"2.6 DEVENV_PREREQ"},{"location":"90-reference/common_makefile/#27-runenv_prereq","text":"Runenv prerequisite list (use += to add some targets) Default: (empty)","title":"2.7 RUNENV_PREREQ"},{"location":"90-reference/common_makefile/#3-targets-ready-to-use","text":"Note You can't override these targets but you can use them!","title":"3. Targets ready to use"},{"location":"90-reference/common_makefile/#31-devenv","text":"Prepare devenv environment Dependencies: $(EXTRA_PREREQ) $(DEVENV_FILE)","title":"3.1 devenv"},{"location":"90-reference/common_makefile/#32-runenv","text":"Prepare runenv environment Dependencies: $(EXTRA_PREREQ) $(RUNENV_FILE)","title":"3.2 runenv"},{"location":"90-reference/common_makefile/#33-lint","text":"Lint the code Dependencies: $(EXTRA_PREREQ) before_lint _lint custom_lint _after_lint","title":"3.3 lint"},{"location":"90-reference/common_makefile/#34-reformat","text":"Reformat the code Dependencies: $(EXTRA_PREREQ) before_reformat _reformat custom_reformat _after_reformat","title":"3.4 reformat"},{"location":"90-reference/common_makefile/#35-clean","text":"Clean the code Dependencies: $(EXTRA_PREREQ) before_clean _clean custom_clean _after_clean","title":"3.5 clean"},{"location":"90-reference/common_makefile/#36-distclean","text":"Distclean the code Dependencies: $(EXTRA_PREREQ) clean before_distclean _distclean custom_distclean _after_distclean","title":"3.6 distclean"},{"location":"90-reference/common_makefile/#37-check","text":"Check the code Dependencies: $(EXTRA_PREREQ) before_check _check custom_check _after_check","title":"3.7 check"},{"location":"90-reference/common_makefile/#38-coverage","text":"Coverage the code Dependencies: $(EXTRA_PREREQ) before_coverage _coverage custom_coverage _after_coverage","title":"3.8 coverage"},{"location":"90-reference/common_makefile/#39-refresh_common_makefiles","text":"Refresh common makefiles from repository","title":"3.9 refresh_common_makefiles"},{"location":"90-reference/common_makefile/#310-tests","text":"simple alias of check target Dependencies: check","title":"3.10 tests"},{"location":"90-reference/common_makefile/#4-extendable-targets","text":"Note You can extend these targets in your own Makefile with target_name:: syntax.","title":"4. Extendable targets"},{"location":"90-reference/common_makefile/#41-before_lint","text":"target executed before lint target Dependencies: devenv","title":"4.1 before_lint"},{"location":"90-reference/common_makefile/#42-custom_lint","text":"custom linting target","title":"4.2 custom_lint"},{"location":"90-reference/common_makefile/#43-before_reformat","text":"target executed before reformat target Dependencies: devenv","title":"4.3 before_reformat"},{"location":"90-reference/common_makefile/#44-custom_reformat","text":"custom reformating target","title":"4.4 custom_reformat"},{"location":"90-reference/common_makefile/#45-before_clean","text":"target executed before clean target","title":"4.5 before_clean"},{"location":"90-reference/common_makefile/#46-custom_clean","text":"custom cleaning target","title":"4.6 custom_clean"},{"location":"90-reference/common_makefile/#47-before_distclean","text":"target executed before distclean target","title":"4.7 before_distclean"},{"location":"90-reference/common_makefile/#48-custom_distclean","text":"custom distcleaning target","title":"4.8 custom_distclean"},{"location":"90-reference/common_makefile/#49-before_check","text":"target executed before check target Dependencies: devenv","title":"4.9 before_check"},{"location":"90-reference/common_makefile/#410-custom_check","text":"custom checking target","title":"4.10 custom_check"},{"location":"90-reference/common_makefile/#411-before_coverage","text":"target executed before coverage target Dependencies: devenv","title":"4.11 before_coverage"},{"location":"90-reference/common_makefile/#412-custom_coverage","text":"custom coverageing target","title":"4.12 custom_coverage"},{"location":"90-reference/common_makefile/#413-_debug","text":"Dump common_makefiles configuration","title":"4.13 _debug"},{"location":"90-reference/python_makefile/","text":"python_makefile.mk 1. Read-only variables You can use them in your own Makefile but NEVER try to override these variables! 1.1 VENV_DIR virtualenv directory Value: $(ROOT_TOOLS)/venv 1.2 ENTER_VENV \"enter virtualenv\" variable you can use it in your Makefile scripts, for example: $(ENTER_VENV) && pip freeze Value: . $(VENV_DIR)/bin/activate 2. Overridable variables Note you can use/override/extend these variables in your own Makefile . 2.1 PYTHON This variable must be specifically overriden BEFORE incuding any common makefiles python interpreter configuration: AUTO_3_8 => auto-download python 3.8 AUTO_3_9 => auto-download python 3.9 AUTO_3_10 => auto-download python 3.10 (path) => use this binary Default: AUTO_3_9 2.2 PYTHON_3_8_URL python 3.8 download url Default: https://github.com/indygreg/python-build-standalone/releases/download/20220318/cpython-3.8.13+20220318-x86_64-unknown-linux-gnu-install_only.tar.gz 2.3 PYTHON_3_9_URL python 3.9 download url Default: https://github.com/indygreg/python-build-standalone/releases/download/20220318/cpython-3.9.11+20220318-x86_64-unknown-linux-gnu-install_only.tar.gz 2.4 PYTHON_3_10_URL python 3.10 download url Default: https://github.com/indygreg/python-build-standalone/releases/download/20220318/cpython-3.10.3+20220318-x86_64-unknown-linux-gnu-install_only.tar.gz 2.5 BLACK black binary to use (binary name or path) => use this binary name/path (if exists) (empty) => disable usage Default: black 2.6 BLACK_REFORMAT_OPTIONS black reformat options Default: $(_MAX_LINE_LENGTH_MINUS_1) 2.7 BLACK_LINT_OPTIONS black lint options Default: $(BLACK_REFORMAT_OPTIONS) --quiet --check 2.8 ISORT isort binary to use (binary name or path) => use this binary name/path (if exists) (empty) => disable usage Default: isort 2.9 ISORT_REFORMAT_OPTIONS isort reformat options Default: $(VENV_DIR) 2.10 ISORT_LINT_OPTIONS isort lint options Default: $(ISORT_REFORMAT_OPTIONS) --check-only 2.11 MAX_LINE_LENGTH max line length (for linting/reformating) Default: 89 2.12 FLAKE8 flake8 binary to use (binary name or path) => use this binary name/path (if exists) (empty) => disable usage Default: flake8 2.13 FLAKE8_LINT_OPTIONS flake8 lint options Default: $(MAX_LINE_LENGTH) 2.14 PYLINT pylint binary to use (binary name or path) => use this binary name/path (if exists) (empty) => disable usage Default: pylint 2.15 PYLINT_LINT_OPTIONS pylint lint options Default: pydantic,_ldap 2.16 MYPY mypy binary to use (binary name or path) => use this binary name/path (if exists) (empty) => disable usage Default: mypy 2.17 MYPY_LINT_OPTIONS mypy lint options Default: --ignore-missing-imports 2.18 BANDIT bandit binary to use (binary name or path) => use this binary name/path (if exists) (empty) => disable usage Default: bandit 2.19 BANDIT_LINT_OPTIONS bandit lint options Default: -ll -r 2.20 LINTIMPORTS lint-imports binary to use (binary name or path) => use this binary name/path (if exists) (empty) => disable usage Default: lint-imports 2.21 LINTIMPORTS_CONF_FILE lint-imports configuration file Default: $(ROOT_DIR)/.importlinter 2.22 PYTEST pytest binary to use (binary name or path) => use this binary name/path (if exists) (empty) => disable usage Default: pytest 2.23 PYTEST_CHECK_OPTIONS pytest options (for unit testing) Default: (empty) 2.24 PYTEST_COVERAGE_OPTIONS pytest options (for coverage) Default: term 2.25 TWINE twine binary to use (binary name or path) => use this binary name/path (if exists) (empty) => disable usage Default: twine 2.26 TWINE_REPOSITORY twine repository Default: (empty) 2.27 TWINE_USERNAME twine username Default: (empty) 2.28 TWINE_PASSWORD twine password Default: (empty) 2.29 TWINE_UPLOAD_EXTRA_OPTIONS twine extra options Default: (empty) 2.30 SAFETY safety binary to use (binary name or path) => use this binary name/path (if exists) (empty) => disable usage Default: safety 2.31 SAFETY_ON_DEV_DEPS if set to 1, run also safety on dev dependencies if set to 0 (default), safety will be run only on runtime dependencies Default: 0 2.32 SAFETY_CHECK_OPTIONS safety check options Default: (empty) 2.33 PIP_COMMON_OPTIONS pip common options Default: --disable-pip-version-check 2.34 PIP_INDEX_URL pip index url Default: (empty) 2.35 PIP_EXTRA_INDEX_URL pip extra index url Default: (empty) 2.36 PIP_INSTALL_OPTIONS pip install extra options Default: (empty) 2.37 PIP_TRUSTED_HOSTS pip trusted hosts (override it with += to add some trusted hosts) Default: pypi.org files.pythonhosted.org 2.38 VENV_SYMLINK add a symlink of this name in the project root (targetting the VENV_DIR) (if empty => no symlink) Default: venv 2.39 REQS_DIR requirements dir Default: $(ROOT_DIR) 2.40 REMOVE_DIST remove \"dist\" directory during clean Default: 1 2.41 REMOVE_BUILD remove \"build\" directory during clean Default: 1 2.42 APP_DIRS python application dirs (space separated) Default: (empty) 2.43 TEST_DIRS tests application dirs (space separated) Default: (empty) 2.44 EXTRA_PYTHON_FILES extra python files to lint/reformat (if they are outside of APP_DIRS/TEST_DIRS) (space separated paths) Default: (empty) 3. Targets ready to use Note You can't override these targets but you can use them! 3.1 devvenv simple alias of devenv target Dependencies: devenv 3.2 refresh_venv Update all *requirements.txt files from *requirements-freezed.txt and pip repositories Dependencies: remove_devenv remove_runenv _rm_requirements devenv 3.3 refresh Deprecated alias of refresh_venv Dependencies: refresh_venv 3.4 reformat_black Reformat sources and tests with black 3.5 reformat_isort Reformat sources and tests with isort 3.6 check_pytest Check with pytest 3.7 coverage_pytest Execute unit-tests and show coverage on console (with pytest) 4. Extendable targets Note You can extend these targets in your own Makefile with target_name:: syntax. 4.1 wheel Build wheel (packaging) Dependencies: devenv before_wheel 4.2 sdist Build sdist (packaging) Dependencies: devenv before_sdist 4.3 upload Upload to Pypi Dependencies: devenv sdist","title":"python_makefile.mk"},{"location":"90-reference/python_makefile/#python_makefilemk","text":"","title":"python_makefile.mk"},{"location":"90-reference/python_makefile/#1-read-only-variables","text":"You can use them in your own Makefile but NEVER try to override these variables!","title":"1. Read-only variables"},{"location":"90-reference/python_makefile/#11-venv_dir","text":"virtualenv directory Value: $(ROOT_TOOLS)/venv","title":"1.1 VENV_DIR"},{"location":"90-reference/python_makefile/#12-enter_venv","text":"\"enter virtualenv\" variable you can use it in your Makefile scripts, for example: $(ENTER_VENV) && pip freeze Value: . $(VENV_DIR)/bin/activate","title":"1.2 ENTER_VENV"},{"location":"90-reference/python_makefile/#2-overridable-variables","text":"Note you can use/override/extend these variables in your own Makefile .","title":"2. Overridable variables"},{"location":"90-reference/python_makefile/#21-python","text":"This variable must be specifically overriden BEFORE incuding any common makefiles python interpreter configuration: AUTO_3_8 => auto-download python 3.8 AUTO_3_9 => auto-download python 3.9 AUTO_3_10 => auto-download python 3.10 (path) => use this binary Default: AUTO_3_9","title":"2.1 PYTHON"},{"location":"90-reference/python_makefile/#22-python_3_8_url","text":"python 3.8 download url Default: https://github.com/indygreg/python-build-standalone/releases/download/20220318/cpython-3.8.13+20220318-x86_64-unknown-linux-gnu-install_only.tar.gz","title":"2.2 PYTHON_3_8_URL"},{"location":"90-reference/python_makefile/#23-python_3_9_url","text":"python 3.9 download url Default: https://github.com/indygreg/python-build-standalone/releases/download/20220318/cpython-3.9.11+20220318-x86_64-unknown-linux-gnu-install_only.tar.gz","title":"2.3 PYTHON_3_9_URL"},{"location":"90-reference/python_makefile/#24-python_3_10_url","text":"python 3.10 download url Default: https://github.com/indygreg/python-build-standalone/releases/download/20220318/cpython-3.10.3+20220318-x86_64-unknown-linux-gnu-install_only.tar.gz","title":"2.4 PYTHON_3_10_URL"},{"location":"90-reference/python_makefile/#25-black","text":"black binary to use (binary name or path) => use this binary name/path (if exists) (empty) => disable usage Default: black","title":"2.5 BLACK"},{"location":"90-reference/python_makefile/#26-black_reformat_options","text":"black reformat options Default: $(_MAX_LINE_LENGTH_MINUS_1)","title":"2.6 BLACK_REFORMAT_OPTIONS"},{"location":"90-reference/python_makefile/#27-black_lint_options","text":"black lint options Default: $(BLACK_REFORMAT_OPTIONS) --quiet --check","title":"2.7 BLACK_LINT_OPTIONS"},{"location":"90-reference/python_makefile/#28-isort","text":"isort binary to use (binary name or path) => use this binary name/path (if exists) (empty) => disable usage Default: isort","title":"2.8 ISORT"},{"location":"90-reference/python_makefile/#29-isort_reformat_options","text":"isort reformat options Default: $(VENV_DIR)","title":"2.9 ISORT_REFORMAT_OPTIONS"},{"location":"90-reference/python_makefile/#210-isort_lint_options","text":"isort lint options Default: $(ISORT_REFORMAT_OPTIONS) --check-only","title":"2.10 ISORT_LINT_OPTIONS"},{"location":"90-reference/python_makefile/#211-max_line_length","text":"max line length (for linting/reformating) Default: 89","title":"2.11 MAX_LINE_LENGTH"},{"location":"90-reference/python_makefile/#212-flake8","text":"flake8 binary to use (binary name or path) => use this binary name/path (if exists) (empty) => disable usage Default: flake8","title":"2.12 FLAKE8"},{"location":"90-reference/python_makefile/#213-flake8_lint_options","text":"flake8 lint options Default: $(MAX_LINE_LENGTH)","title":"2.13 FLAKE8_LINT_OPTIONS"},{"location":"90-reference/python_makefile/#214-pylint","text":"pylint binary to use (binary name or path) => use this binary name/path (if exists) (empty) => disable usage Default: pylint","title":"2.14 PYLINT"},{"location":"90-reference/python_makefile/#215-pylint_lint_options","text":"pylint lint options Default: pydantic,_ldap","title":"2.15 PYLINT_LINT_OPTIONS"},{"location":"90-reference/python_makefile/#216-mypy","text":"mypy binary to use (binary name or path) => use this binary name/path (if exists) (empty) => disable usage Default: mypy","title":"2.16 MYPY"},{"location":"90-reference/python_makefile/#217-mypy_lint_options","text":"mypy lint options Default: --ignore-missing-imports","title":"2.17 MYPY_LINT_OPTIONS"},{"location":"90-reference/python_makefile/#218-bandit","text":"bandit binary to use (binary name or path) => use this binary name/path (if exists) (empty) => disable usage Default: bandit","title":"2.18 BANDIT"},{"location":"90-reference/python_makefile/#219-bandit_lint_options","text":"bandit lint options Default: -ll -r","title":"2.19 BANDIT_LINT_OPTIONS"},{"location":"90-reference/python_makefile/#220-lintimports","text":"lint-imports binary to use (binary name or path) => use this binary name/path (if exists) (empty) => disable usage Default: lint-imports","title":"2.20 LINTIMPORTS"},{"location":"90-reference/python_makefile/#221-lintimports_conf_file","text":"lint-imports configuration file Default: $(ROOT_DIR)/.importlinter","title":"2.21 LINTIMPORTS_CONF_FILE"},{"location":"90-reference/python_makefile/#222-pytest","text":"pytest binary to use (binary name or path) => use this binary name/path (if exists) (empty) => disable usage Default: pytest","title":"2.22 PYTEST"},{"location":"90-reference/python_makefile/#223-pytest_check_options","text":"pytest options (for unit testing) Default: (empty)","title":"2.23 PYTEST_CHECK_OPTIONS"},{"location":"90-reference/python_makefile/#224-pytest_coverage_options","text":"pytest options (for coverage) Default: term","title":"2.24 PYTEST_COVERAGE_OPTIONS"},{"location":"90-reference/python_makefile/#225-twine","text":"twine binary to use (binary name or path) => use this binary name/path (if exists) (empty) => disable usage Default: twine","title":"2.25 TWINE"},{"location":"90-reference/python_makefile/#226-twine_repository","text":"twine repository Default: (empty)","title":"2.26 TWINE_REPOSITORY"},{"location":"90-reference/python_makefile/#227-twine_username","text":"twine username Default: (empty)","title":"2.27 TWINE_USERNAME"},{"location":"90-reference/python_makefile/#228-twine_password","text":"twine password Default: (empty)","title":"2.28 TWINE_PASSWORD"},{"location":"90-reference/python_makefile/#229-twine_upload_extra_options","text":"twine extra options Default: (empty)","title":"2.29 TWINE_UPLOAD_EXTRA_OPTIONS"},{"location":"90-reference/python_makefile/#230-safety","text":"safety binary to use (binary name or path) => use this binary name/path (if exists) (empty) => disable usage Default: safety","title":"2.30 SAFETY"},{"location":"90-reference/python_makefile/#231-safety_on_dev_deps","text":"if set to 1, run also safety on dev dependencies if set to 0 (default), safety will be run only on runtime dependencies Default: 0","title":"2.31 SAFETY_ON_DEV_DEPS"},{"location":"90-reference/python_makefile/#232-safety_check_options","text":"safety check options Default: (empty)","title":"2.32 SAFETY_CHECK_OPTIONS"},{"location":"90-reference/python_makefile/#233-pip_common_options","text":"pip common options Default: --disable-pip-version-check","title":"2.33 PIP_COMMON_OPTIONS"},{"location":"90-reference/python_makefile/#234-pip_index_url","text":"pip index url Default: (empty)","title":"2.34 PIP_INDEX_URL"},{"location":"90-reference/python_makefile/#235-pip_extra_index_url","text":"pip extra index url Default: (empty)","title":"2.35 PIP_EXTRA_INDEX_URL"},{"location":"90-reference/python_makefile/#236-pip_install_options","text":"pip install extra options Default: (empty)","title":"2.36 PIP_INSTALL_OPTIONS"},{"location":"90-reference/python_makefile/#237-pip_trusted_hosts","text":"pip trusted hosts (override it with += to add some trusted hosts) Default: pypi.org files.pythonhosted.org","title":"2.37 PIP_TRUSTED_HOSTS"},{"location":"90-reference/python_makefile/#238-venv_symlink","text":"add a symlink of this name in the project root (targetting the VENV_DIR) (if empty => no symlink) Default: venv","title":"2.38 VENV_SYMLINK"},{"location":"90-reference/python_makefile/#239-reqs_dir","text":"requirements dir Default: $(ROOT_DIR)","title":"2.39 REQS_DIR"},{"location":"90-reference/python_makefile/#240-remove_dist","text":"remove \"dist\" directory during clean Default: 1","title":"2.40 REMOVE_DIST"},{"location":"90-reference/python_makefile/#241-remove_build","text":"remove \"build\" directory during clean Default: 1","title":"2.41 REMOVE_BUILD"},{"location":"90-reference/python_makefile/#242-app_dirs","text":"python application dirs (space separated) Default: (empty)","title":"2.42 APP_DIRS"},{"location":"90-reference/python_makefile/#243-test_dirs","text":"tests application dirs (space separated) Default: (empty)","title":"2.43 TEST_DIRS"},{"location":"90-reference/python_makefile/#244-extra_python_files","text":"extra python files to lint/reformat (if they are outside of APP_DIRS/TEST_DIRS) (space separated paths) Default: (empty)","title":"2.44 EXTRA_PYTHON_FILES"},{"location":"90-reference/python_makefile/#3-targets-ready-to-use","text":"Note You can't override these targets but you can use them!","title":"3. Targets ready to use"},{"location":"90-reference/python_makefile/#31-devvenv","text":"simple alias of devenv target Dependencies: devenv","title":"3.1 devvenv"},{"location":"90-reference/python_makefile/#32-refresh_venv","text":"Update all *requirements.txt files from *requirements-freezed.txt and pip repositories Dependencies: remove_devenv remove_runenv _rm_requirements devenv","title":"3.2 refresh_venv"},{"location":"90-reference/python_makefile/#33-refresh","text":"Deprecated alias of refresh_venv Dependencies: refresh_venv","title":"3.3 refresh"},{"location":"90-reference/python_makefile/#34-reformat_black","text":"Reformat sources and tests with black","title":"3.4 reformat_black"},{"location":"90-reference/python_makefile/#35-reformat_isort","text":"Reformat sources and tests with isort","title":"3.5 reformat_isort"},{"location":"90-reference/python_makefile/#36-check_pytest","text":"Check with pytest","title":"3.6 check_pytest"},{"location":"90-reference/python_makefile/#37-coverage_pytest","text":"Execute unit-tests and show coverage on console (with pytest)","title":"3.7 coverage_pytest"},{"location":"90-reference/python_makefile/#4-extendable-targets","text":"Note You can extend these targets in your own Makefile with target_name:: syntax.","title":"4. Extendable targets"},{"location":"90-reference/python_makefile/#41-wheel","text":"Build wheel (packaging) Dependencies: devenv before_wheel","title":"4.1 wheel"},{"location":"90-reference/python_makefile/#42-sdist","text":"Build sdist (packaging) Dependencies: devenv before_sdist","title":"4.2 sdist"},{"location":"90-reference/python_makefile/#43-upload","text":"Upload to Pypi Dependencies: devenv sdist","title":"4.3 upload"},{"location":"90-reference/shell_makefile/","text":"shell_makefile.mk 1. Overridable variables Note you can use/override/extend these variables in your own Makefile . 1.1 SHELLCHECK This variable must be specifically overriden BEFORE incuding any common makefiles shellcheck linter configuration: AUTO => auto-download shellcheck tool (empty) => disable shellcheck linter (path) => disable auto-download and use this binary Default: AUTO 1.2 SHELLCHECK_ARGS shellcheck linter extra options Default: (empty) 1.3 SHELLCHECK_URL shellcheck download url Default: https://github.com/koalaman/shellcheck/releases/download/stable/shellcheck-stable.linux.x86_64.tar.xz 1.4 SHELLCHECK_FILES shellcheck files to check (by default, all *.sh files are checked) Default: $(shell find \"$(ROOT_DIR)\" -type f -name \"*.sh\" |grep -v \"^$(ROOT_DIR)/\\.tools/\" |grep -v \"^$(ROOT_DIR)/\\.tmp/\" |grep \"[a-zA-Z0-9]\" |xargs) 2. Targets ready to use Note You can't override these targets but you can use them! 2.1 lint_shellcheck Lint the code with shellcheck","title":"shell_makefile.mk"},{"location":"90-reference/shell_makefile/#shell_makefilemk","text":"","title":"shell_makefile.mk"},{"location":"90-reference/shell_makefile/#1-overridable-variables","text":"Note you can use/override/extend these variables in your own Makefile .","title":"1. Overridable variables"},{"location":"90-reference/shell_makefile/#11-shellcheck","text":"This variable must be specifically overriden BEFORE incuding any common makefiles shellcheck linter configuration: AUTO => auto-download shellcheck tool (empty) => disable shellcheck linter (path) => disable auto-download and use this binary Default: AUTO","title":"1.1 SHELLCHECK"},{"location":"90-reference/shell_makefile/#12-shellcheck_args","text":"shellcheck linter extra options Default: (empty)","title":"1.2 SHELLCHECK_ARGS"},{"location":"90-reference/shell_makefile/#13-shellcheck_url","text":"shellcheck download url Default: https://github.com/koalaman/shellcheck/releases/download/stable/shellcheck-stable.linux.x86_64.tar.xz","title":"1.3 SHELLCHECK_URL"},{"location":"90-reference/shell_makefile/#14-shellcheck_files","text":"shellcheck files to check (by default, all *.sh files are checked) Default: $(shell find \"$(ROOT_DIR)\" -type f -name \"*.sh\" |grep -v \"^$(ROOT_DIR)/\\.tools/\" |grep -v \"^$(ROOT_DIR)/\\.tmp/\" |grep \"[a-zA-Z0-9]\" |xargs)","title":"1.4 SHELLCHECK_FILES"},{"location":"90-reference/shell_makefile/#2-targets-ready-to-use","text":"Note You can't override these targets but you can use them!","title":"2. Targets ready to use"},{"location":"90-reference/shell_makefile/#21-lint_shellcheck","text":"Lint the code with shellcheck","title":"2.1 lint_shellcheck"}]}